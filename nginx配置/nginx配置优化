1、配置Nginx gzip 提高访问速度

	gzip on; #开启gzip压缩功能
	gzip_min_length 1k; 设置允许压缩的页面最小字节数，页面字节数从header头的Content-Length中获取，默认值是0，表示不管页面多大都进行压缩，建议设置成大于1K，如果小于1K可能会越压越大
	
	gzip_buffers 4 16k;
	#压缩缓冲区大小，表示申请4个单位为16K的内存作为压缩结果流缓存，默认是申请与原始是数据大小相同的内存空间来存储gzip压缩结果；

	gzip_http_version 1.1
	#压缩版本（默认1.1 前端为squid2.5时使用1.0）用于设置识别HTTP协议版本，默认是1.1，目前大部分浏览器已经支持GZIP压缩，使用默认即可。

	gzip_comp_level 2;
	#压缩比率，用来指定GZIP压缩比，1压缩比最小，处理速度最快；9压缩比最大，传输速度快，但处理最慢，也消耗CPU资源

	gzip_types  text/css text/xml application/javascript; 
	#用来指定压缩的类型，“text/html”类型总是会被压缩，这个就是HTTP原理部分讲的媒体类型。

	gzip_vary on;
	#vary hear支持，该选项可以让前端的缓存服务器缓存经过GZIP压缩的页面，例如用缓存经过Nginx压缩的数据。
	
	配置在http 标签端
	http{
		gzip on;
		gzip_min_length  1k;
		gzip_buffers     4 32k;
		gzip_http_version 1.1;
		gzip_comp_level 9;
		gzip_types  text/css text/xml application/javascript; 
		gzip_vary on;
	}
	
2、Nginx expires
   主要功能为网站内容设定一个过期时间，当用户第一次访问到内容时，内容会缓存在用户浏览器本地，用户再次访问，浏览器默认加载缓存内容，用户不用访问服务器，直到缓存内容过期
   
   [root@ip-172-31-5-163 src]# curl -I https://blog.csdn.net/
		HTTP/1.1 200 OK
		Date: Thu, 21 Nov 2019 06:32:43 GMT
		Content-Type: text/html; charset=UTF-8
		Connection: keep-alive
		Set-Cookie: acw_tc=2760827315743179633476261eea3cc8685a31fd35eccd5b0ff9f0e53e076f;path=/;HttpOnly;Max-Age=2678401
		Server: openresty
		Vary: Accept-Encoding
		Set-Cookie: uuid_tt_dd=10_2218960520-1574317963352-108625; Expires=Thu, 01 Jan 2025 00:00:00 GMT; Path=/; Domain=.csdn.net; #过期时间
		Set-Cookie: dc_session_id=10_1574317963352.968117; Expires=Thu, 01 Jan 2025 00:00:00 GMT; Path=/; Domain=.csdn.net;
		Vary: Accept-Encoding
		Access-Control-Allow-Credentials: true
		Access-Control-Allow-Headers: Authorization,Content-Type,Accept,Origin,User-Agent,DNT,Cache-Control,X-Mx-ReqToken,X-Data-Type,X-Requested-With,X-Access-Token,X-App-ID,X-Device-ID,X-OS
		Access-Control-Allow-Methods: GET,PUT,POST,DELETE,OPTIONS
		Strict-Transport-Security: max-age=86400       #<==缓存的总时间按秒

	注：频繁更新网站不适合做，会影响到用户体验问题，访问旧的内容

3、根据url目录进行判断，添加expires
	location ~^/(images|javascript|js|css|flash|media|static)/ {
		expires 360d;
	}
	
4、限制指定目录下上传文件程序
	 location ~ ^/images/.*\.(php|php5|.sh|.pl|.py)$ 
			{ 
			  deny all; 
			} 
	location ~ ^/static/.*\.(php|php5|.sh|.pl|.py)$ 
			{ 
			   deny all; 
			} 
	location ~* ^/data/(attachment|avatar)/.*\.(php|php5)$ 
		{ 
			deny all; 
		} 
		
5、worker_processes  1;
	根据连接数进行设置
	
6、设置文件传输模式
		设置参数：sendfile on；
			同时将tcp_nopush和tcp_nodelay两个指定设为on，可防止网络及磁盘I/O阻塞，提升Nginx工作效率。
			syntax：    sendfile on|off  #参数语法
			default：    sendfile off    #参数默认大小
			context：    http，server，location，if in location #可放置的标签段
		设置参数：tcp_nopush on；

			Syntax:  tcp_nopush on | off;  #参数语法
			Default:   tcp_nopush off;      #参数默认大小
			Context:    http, server, location  #可以放置标签段
